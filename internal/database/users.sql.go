// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, created_at, updated_at, email, hashed_password
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id, created_at, updated_at, email, hashed_password, is_chirpy_red
FROM 
    users
WHERE
    email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const resetUserTable = `-- name: ResetUserTable :exec
TRUNCATE TABLE users CASCADE
`

func (q *Queries) ResetUserTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUserTable)
	return err
}

const updateEmailAndPassword = `-- name: UpdateEmailAndPassword :exec
UPDATE users
SET email = $2, hashed_password = $3, updated_at = $4
WHERE id = $1
`

type UpdateEmailAndPasswordParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
	UpdatedAt      time.Time
}

func (q *Queries) UpdateEmailAndPassword(ctx context.Context, arg UpdateEmailAndPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateEmailAndPassword,
		arg.ID,
		arg.Email,
		arg.HashedPassword,
		arg.UpdatedAt,
	)
	return err
}

const updateIsChirpsRedStatus = `-- name: UpdateIsChirpsRedStatus :exec
UPDATE users
SET is_chirpy_red = $2
WHERE id = $1
`

type UpdateIsChirpsRedStatusParams struct {
	ID          uuid.UUID
	IsChirpyRed sql.NullBool
}

func (q *Queries) UpdateIsChirpsRedStatus(ctx context.Context, arg UpdateIsChirpsRedStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateIsChirpsRedStatus, arg.ID, arg.IsChirpyRed)
	return err
}
