// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, created_at, updated_at, email, hashed_password
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, created_at, updated_at, email, hashed_password, access_token
`

type CreateUserParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.AccessToken,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT
    id, created_at, updated_at, email, hashed_password, access_token
FROM 
    users
WHERE
    email = $1
`

func (q *Queries) GetUserById(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.AccessToken,
	)
	return i, err
}

const resetUserTable = `-- name: ResetUserTable :exec
TRUNCATE TABLE users CASCADE
`

func (q *Queries) ResetUserTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUserTable)
	return err
}

const setUserToken = `-- name: SetUserToken :one
UPDATE users
SET access_token = $1
WHERE email = $2
RETURNING id, created_at, updated_at, email, hashed_password, access_token
`

type SetUserTokenParams struct {
	AccessToken string
	Email       string
}

func (q *Queries) SetUserToken(ctx context.Context, arg SetUserTokenParams) (User, error) {
	row := q.db.QueryRowContext(ctx, setUserToken, arg.AccessToken, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.AccessToken,
	)
	return i, err
}
